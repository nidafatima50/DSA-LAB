#include <iostream>

using namespace std;

const int SIZE = 5; 

class CircularQueue {

private:

    int queue[SIZE];

    int front, rear;

public:

    CircularQueue() {

        front = -1;

        rear = -1;

    }

    bool isFull() {

        return (front == (rear + 1) % SIZE);

    }

    bool isEmpty() {

        return (front == -1);

    }

    void addRequest(int requestID) {

        if (isFull()) {

            cout << "Queue is full! Cannot add request.\n";

            return;

        }



        if (isEmpty()) {

            front = rear = 0;

        } else {

            rear = (rear + 1) % SIZE;

        }



        queue[rear] = requestID;

        cout << "Request ID " << requestID << " added to the queue.\n";

    }

    void processRequest() {

        if (isEmpty()) {

            cout << "Queue is empty! No requests to process.\n";

            return;

        }



        cout << "Processing Request ID " << queue[front] << ".\n";



        if (front == rear) {

            front = rear = -1; // Queue becomes empty

        } else {

            front = (front + 1) % SIZE;

        }

    }

    void displayRequests() {

        if (isEmpty()) {

            cout << "Queue is empty!\n";

            return;

        }



        cout << "Current Request Queue: ";

        int i = front;

        while (true) {

            cout << queue[i] << " ";

            if (i == rear)

                break;

            i = (i + 1) % SIZE;

        }

        cout << endl;

    }

};

int main() {

    CircularQueue cq;

    int choice, id;



    do {

        cout << "\n--- Customer Service Request System ---\n";

        cout << "1. Add Request\n2. Process Request\n3. Display Requests\n4. Exit\n";

        cout << "Enter your choice: ";

        cin >> choice;



        switch (choice) {

            case 1:

                cout << "Enter Request ID: ";

                cin >> id;

                cq.addRequest(id);

                break;

            case 2:

                cq.processRequest();

                break;

            case 3:

                cq.displayRequests();

                break;

            case 4:

                cout << "Exiting...\n";

                break;

            default:

                cout << "Invalid choice! Try again.\n";

        }

    } while (choice != 4);



    return 0;

}

